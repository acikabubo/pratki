diff --git a/TODO b/TODO
index b1864b7..dbde420 100644
--- a/TODO
+++ b/TODO
@@ -14,3 +14,7 @@ https://github.com/miguelgrinberg/flask-oauth-example
 
 https://pythonhosted.org/Flask-Scss/
 https://flask-assets.readthedocs.io/en/latest/
+
+##### Flask Dance #####
+Flask-Dance -> Doing the OAuth dance with style using Flask, requests, and oauthlib
+pip install Flask-Dance[sqla] -> if you're planning on using the SQLAlchemy backend
\ No newline at end of file
diff --git a/app/config.py b/app/config.py
index 810533b..eddfd6c 100644
--- a/app/config.py
+++ b/app/config.py
@@ -19,9 +19,5 @@ class Config(object):
         'facebook': {
             'id': '1982853558673321',  # pratki facebook app
             'secret': 'ea3bb54866a4bc6667a78cabca0034be'  # pratki facebook app
-        },
-        'twitter': {
-            'id': '3RzWQclolxWZIMq5LJqzRZPTl',
-            'secret': 'm9TEd58DSEtRrZHpz2EjrV9AhsBRxKMo8m3kuIZj3zLwzwIimt'
         }
     }
diff --git a/app/oauth.py b/app/oauth.py
index 3a77c0a..d3e9d7e 100644
--- a/app/oauth.py
+++ b/app/oauth.py
@@ -1,7 +1,7 @@
 import json
 
-from rauth import OAuth1Service, OAuth2Service
-from flask import current_app, url_for, request, redirect, session
+from rauth import OAuth2Service
+from flask import current_app, url_for, request, redirect
 
 
 class OAuthSignIn(object):
@@ -72,38 +72,3 @@ class FacebookSignIn(OAuthSignIn):
                                             # is used instead
             me.get('email')
         )
-
-
-class TwitterSignIn(OAuthSignIn):
-    def __init__(self):
-        super(TwitterSignIn, self).__init__('twitter')
-        self.service = OAuth1Service(
-            name='twitter',
-            consumer_key=self.consumer_id,
-            consumer_secret=self.consumer_secret,
-            request_token_url='https://api.twitter.com/oauth/request_token',
-            authorize_url='https://api.twitter.com/oauth/authorize',
-            access_token_url='https://api.twitter.com/oauth/access_token',
-            base_url='https://api.twitter.com/1.1/'
-        )
-
-    def authorize(self):
-        request_token = self.service.get_request_token(
-            params={'oauth_callback': self.get_callback_url()}
-        )
-        session['request_token'] = request_token
-        return redirect(self.service.get_authorize_url(request_token[0]))
-
-    def callback(self):
-        request_token = session.pop('request_token')
-        if 'oauth_verifier' not in request.args:
-            return None, None, None
-        oauth_session = self.service.get_auth_session(
-            request_token[0],
-            request_token[1],
-            data={'oauth_verifier': request.args['oauth_verifier']}
-        )
-        me = oauth_session.get('account/verify_credentials.json').json()
-        social_id = 'twitter$' + str(me.get('id'))
-        username = me.get('screen_name')
-        return social_id, username, None   # Twitter does not provide email
diff --git a/app/routes.py b/app/routes.py
index e0b3d34..c109c4c 100644
--- a/app/routes.py
+++ b/app/routes.py
@@ -1,333 +1,27 @@
-import json
-import requests
-import xmltodict
-from dateutil.parser import parse
-from datetime import datetime, time
-from app import app, db
-from flask import request, jsonify, render_template, redirect, flash, url_for
-from .forms import PackageForm, UploadForm
-from .models import User, Package
-from sqlalchemy.exc import IntegrityError
-from flask_login import login_user, logout_user, current_user, login_required
-from .oauth import OAuthSignIn
+from flask import Flask, redirect, url_for
+from werkzeug.contrib.fixers import ProxyFix
+from flask_dance.contrib.github import make_github_blueprint, github
+from flask_dance.contrib.facebook import make_facebook_blueprint, facebook
 
+app = Flask(__name__)
+app.wsgi_app = ProxyFix(app.wsgi_app)
+app.secret_key = "supersekrit"
 
-@app.route('/')
-def index():
-    if current_user.is_authenticated:
-        return redirect(url_for('info'))
-
-    return render_template('index.html')
-
-
-@app.route('/logout')
-def logout():
-    logout_user()
-    return redirect(url_for('index'))
-
-
-@app.route('/authorize/<provider>')
-def oauth_authorize(provider):
-    if not current_user.is_anonymous:
-        return redirect(url_for('info'))
-    oauth = OAuthSignIn.get_provider(provider)
-    return oauth.authorize()
-
-
-@app.route('/callback/<provider>')
-def oauth_callback(provider):
-    if not current_user.is_anonymous:
-        return redirect(url_for('index'))
-    oauth = OAuthSignIn.get_provider(provider)
-    social_id, username, email = oauth.callback()
-    if social_id is None:
-        flash('Authentication failed.')
-        return redirect(url_for('index'))
-    user = User.query.filter_by(social_id=social_id).first()
-    if not user:
-        user = User(social_id=social_id, nickname=username, email=email)
-        db.session.add(user)
-        db.session.commit()
-    login_user(user, True)
-    return redirect(url_for('info'))
-
-
-# TODO: This route should be /info
-@app.route('/info', methods=('GET', 'POST'))
-@login_required
-def info():
-    # Get packages from logged user
-    pkgs = Package.query.filter_by(user=current_user).all()
-
-    packages = []
-    waiting, arrived = 0, 0
-    # for item in pkgs:
-    #     track_no = item.track_no
-    #     pkg_date = item.shipped_on
-    #     pkg_name = item.name
-    #     send_date = datetime.combine(pkg_date, datetime.min.time())
-    #     shipped_ago = (datetime.now() - send_date).days
-
-    #     if len(track_no) != 13:
-    #         waiting += 1
-    #         packages.append({
-    #             'track_no': track_no,
-    #             'shipped_ago': shipped_ago,
-    #             'info_date': "",
-    #             'notice': "",
-    #             'pkg_name': pkg_name
-    #         })
-    #         continue
-
-    #     r = requests.get(
-    #         'http://www.posta.com.mk/tnt/api/query?id=%s' % track_no)
-
-    #     try:
-    #         # Convert xml data to dict
-    #         req_data = xmltodict.parse(r.text)
-    #     except Exception as ex:
-    #         print("Error occurred while parsing xml data: %s" % str(ex))
-    #         continue
-
-    #     # Get required data
-    #     array_of_tracking_data = req_data['ArrayOfTrackingData']
-
-    #     # Check if there is no package data
-    #     # and add in table without Info/Data & Notice
-    #     if not array_of_tracking_data:
-    #         waiting += 1
-    #         packages.append({
-    #             'track_no': track_no,
-    #             'shipped_ago': shipped_ago,
-    #             'info_date': "",
-    #             'notice': "",
-    #             'pkg_name': pkg_name
-    #         })
-    #         continue
-
-    #     # Get tracking data per package
-    #     tracking_data = array_of_tracking_data['TrackingData']
-
-    #     # Get latest tracking data pre package
-    #     try:
-    #         # Tracking data it's a list when there is multiple items
-    #         # Get only the latest item/status
-    #         package = list(tracking_data[-1].items())
-    #     except KeyError:
-    #         # Tracking data it's not a list when there is only one item
-    #         package = list(tracking_data.items())
-
-    #     # Get datetime format, if there is midnight get only date
-    #     dt_format = '%d.%m.%Y'
-    #     pkg_date = parse(package[3][1])
-    #     if pkg_date.time() != time(0, 0):
-    #         dt_format = '%d.%m.%Y %H:%M:%S'
-
-    #     # Get data from post office
-    #     pkg_date = parse(package[3][1]).strftime(dt_format)
-    #     pkg_notice = package[4][1]
-
-    #     arrived += 1
-    #     packages.append({
-    #         'track_no': track_no,
-    #         'shipped_ago': shipped_ago,
-    #         'info_date': pkg_date,
-    #         'notice': pkg_notice,
-    #         'pkg_name': pkg_name
-    #     })
-
-    # # Sort by shipped ago
-    # packages = sorted(packages, key=lambda k: k['shipped_ago'])
-
-    packages = [{'info_date': '',
-                'notice': '',
-                'pkg_name': 'Large 830 breadboards x 2',
-                'shipped_ago': 14,
-                'track_no': 'UN039457012CN'},
-            {'info_date': '',
-                'notice': '',
-                'pkg_name': '5 Colors mini breadboards',
-                'shipped_ago': 14,
-                'track_no': 'UN036339714CN'},
-            {'info_date': '',
-                'notice': '',
-                'pkg_name': 'Mini breadboards x 2',
-                'shipped_ago': 15,
-                'track_no': 'LP00105168891208'},
-            {'info_date': '',
-                'notice': '',
-                'pkg_name': 'Bandana',
-                'shipped_ago': 24,
-                'track_no': 'UC999996946CN'},
-            {'info_date': '',
-                'notice': '',
-                'pkg_name': '10Pcs 4 channel IIC I2C LLC',
-                'shipped_ago': 26,
-                'track_no': 'UC994073043CN'},
-            {'info_date': '',
-                'notice': '',
-                'pkg_name': 'Axis Gyro and Accelerometer Module',
-                'shipped_ago': 27,
-                'track_no': 'UC988205712CN'},
-            {'info_date': '',
-                'notice': '',
-                'pkg_name': 'DS3231 AT24C32 IIC Module Precision Clock Module',
-                'shipped_ago': 28,
-                'track_no': 'UC987371112CN'}]
-
-    # Return raw json data
-    if request.is_json:
-        return jsonify(packages)
-
-    # Make final data
-    data = {
-        'packages': packages,
-        'info': {
-            'waiting': waiting,
-            'arrived': arrived,
-            'total': waiting + arrived
-        }
-    }
-
-    form = PackageForm()
-    upload_form = UploadForm()
-
-    if form.validate_on_submit():
-        try:
-            package = Package(
-                track_no=form.track_no.data,
-                shipped_on=form.shipped_on.data,
-                name=form.name.data,
-                user=current_user)
-
-            db.session.add(package)
-            db.session.commit()
+blueprint = make_facebook_blueprint(
+    client_id="1982853558673321",
+    client_secret="ea3bb54866a4bc6667a78cabca0034be",
+)
 
-            flash('Package created successfully.', 'info')
-        except IntegrityError:
-            db.session.rollback()
-            flash(
-                'There is package with tracking number: %s.' % form.track_no.data,
-                'warning')
+app.register_blueprint(blueprint, url_prefix="/login")
 
-    if 'file' in request.files:
-        uploaded_file = request.files['file']
 
-        if uploaded_file:
-            try:
-                err_occ = False
-
-                file_content = uploaded_file.read().decode('utf8')
-                pkgs = [item.split(' - ') for item in file_content.split('\n')]
-
-                total = 0
-                for track_no, shipped_on, pkg_name in pkgs:
-                    try:
-                        package = Package(
-                            track_no=track_no,
-                            shipped_on=parse(shipped_on, dayfirst=True),
-                            name=pkg_name,
-                            user=current_user
-                        )
-                        db.session.add(package)
-                        db.session.flush()
-
-                        total += 1
-                    except IntegrityError:
-                        db.session.rollback()
-                        continue
-                    except Exception as ex:
-                        err_occ = True
-                        db.session.rollback()
-                        flash('Error occurred while syncing data.', 'warning')
-                        break
-
-                if not err_occ:
-                    db.session.commit()
-
-                    if total:
-                        flash('Sync %s packages.' % total, 'info')
-
-                        return redirect(url_for('info'))
-                    else:
-                        flash('There is no packages for sync.', 'info')
-
-            except Exception as ex:
-                flash(
-                    'Error occurred while reading file or invalid data format.', 'warning')
-
-    return render_template('info.html',
-        data=data, form=form, upload_form=upload_form)
-
-
-@app.route('/<track_no>/')
-@login_required
-def pkg_details(track_no):
-
-    # Initial data
-    data = {
-        'fnl': [],
-        'track_no': track_no,
-        'item_name': request.args.get('item_name', 'NO PACKAGE NAME')
-    }
-
-    if len(track_no) != 13:
-        return render_template('package.html', data=data)
-
-    r = requests.get(
-        'http://www.posta.com.mk/tnt/api/query?id=%s' % track_no)
-
-    # Convert xml data to dict
-    req_data = xmltodict.parse(r.text)
-
-    if not req_data['ArrayOfTrackingData']:
-        return render_template('package.html', data=data)
-
-    # Get required data
-    tracking_data = req_data['ArrayOfTrackingData']['TrackingData']
-
-    if type(tracking_data) != list:
-        tracking_data = [tracking_data]
-
-    dt_format = '%d.%m.%Y'
-    for item in tracking_data:
-        row = list(item.items())
-
-        pkg_date = parse(row[3][1])
-        if pkg_date.time() != time(0, 0):
-            dt_format = '%d.%m.%Y %H:%M:%S'
-
-        data['fnl'].append({
-            'from': row[1][1],
-            'to': row[2][1],
-            'date': parse(row[3][1]).strftime(dt_format),
-            'notice': row[4][1]
-        })
-
-    # Return raw json data
-    if request.is_json:
-        return jsonify(data)
-
-    return render_template('package.html', data=data)
-
-
-@app.route('/delete_pkgs/<pkgs>/', methods=['DELETE'])
-@login_required
-def delete_pkgs(pkgs):
-    pkgs = json.loads(pkgs)
-    
-    try:
-        db.session.query(Package).filter(
-            Package.user_id==current_user.id,
-            Package.track_no.in_(pkgs)
-        ).delete(synchronize_session='fetch')
-
-        db.session.commit()
-        return "OK"
-    
-    except Exception as ex:
-        db.session.rollback()
-
-
-if __name__ == '__main__':
-    app.run(debug=True, use_reloader=True)
+@app.route("/")
+def index():
+    if not facebook.authorized:
+        return redirect(url_for("facebook.login"))
+    resp = github.get("/user")
+    assert resp.ok
+    return "You are @{login} on GitHub".format(login=resp.json()["login"])
+
+if __name__ == "__main__":
+    app.run()
diff --git a/app/templates/index.html b/app/templates/index.html
index e2b03b3..c68f7df 100644
--- a/app/templates/index.html
+++ b/app/templates/index.html
@@ -20,10 +20,6 @@
                         href="{{ url_for('oauth_authorize', provider='facebook') }}">
                             Login with Facebook
                     </a>
-                    <a class="btn btn-block loginBtn loginBtn-google"
-                        href="{{ url_for('oauth_authorize', provider='google') }}">
-                            Login with Google
-                    </a>
                 </div>
             </center>
         </div>
diff --git a/requirements.in b/requirements.in
index ee6ecf6..499d418 100644
--- a/requirements.in
+++ b/requirements.in
@@ -7,6 +7,7 @@ Flask-Bootstrap4
 Flask-WTF
 Flask-Uploads
 Flask-Assets
+Flask-Dance[sqla]
 rauth
 gunicorn
 xmltodict
diff --git a/requirements.txt b/requirements.txt
index 19ce954..72c0348 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -11,6 +11,7 @@ click==6.7                # via flask
 dominate==2.3.1           # via flask-bootstrap4
 flask-assets==0.12
 flask-bootstrap4==4.0.2
+flask-dance[sqla]==1.1.0
 flask-login==0.4.1
 flask-migrate==2.2.1
 flask-sqlalchemy==2.3.2
@@ -21,17 +22,22 @@ gunicorn==19.9.0
 idna==2.7                 # via requests
 itsdangerous==0.24        # via flask
 jinja2==2.10              # via flask
+lazy==1.3                 # via flask-dance
 mako==1.0.7               # via alembic
 markupsafe==1.0           # via jinja2, mako
+oauthlib==2.1.0           # via flask-dance, requests-oauthlib
 pipdeptree==0.13.0
 psycopg2-binary==2.7.5
 python-dateutil==2.7.3
 python-editor==1.0.3      # via alembic
 rauth==0.7.3
-requests==2.19.1          # via rauth
-six==1.11.0               # via python-dateutil
-sqlalchemy==1.2.11        # via alembic, flask-sqlalchemy
+requests-oauthlib==1.0.0  # via flask-dance
+requests==2.19.1          # via flask-dance, rauth, requests-oauthlib
+six==1.11.0               # via flask-dance, python-dateutil, sqlalchemy-utils
+sqlalchemy-utils==0.33.6  # via flask-dance
+sqlalchemy==1.2.11        # via alembic, flask-dance, flask-sqlalchemy, sqlalchemy-utils
 urllib3==1.23             # via requests
+urlobject==2.4.3          # via flask-dance
 visitor==0.1.3            # via flask-bootstrap4
 webassets==0.12.1         # via flask-assets
 werkzeug==0.14.1          # via flask
diff --git a/scripts/runserver.sh b/scripts/runserver.sh
index 375a126..5c89c47 100755
--- a/scripts/runserver.sh
+++ b/scripts/runserver.sh
@@ -1 +1 @@
-flask run --cert nginx/ssl/pratki-heroku.crt --key nginx/ssl/pratki-heroku.key --host 0.0.0.0 --port 5000 --reload
+FLASK_APP=app.routes.py flask run --cert nginx/ssl/pratki-heroku.crt --key nginx/ssl/pratki-heroku.key --host 0.0.0.0 --port 5000 --reload
